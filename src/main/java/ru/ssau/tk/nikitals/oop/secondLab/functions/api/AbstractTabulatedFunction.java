package ru.ssau.tk.nikitals.oop.secondLab.functions.api;

/**
 * Абстрактный класс, представляющий табулированную функцию.
 */
public abstract class AbstractTabulatedFunction implements TabulatedFunction, MathFunction {

    /**
     * Возвращает индекс аргумента, ближайшего меньшего или равного значению аргумента {@code x}.
     * <ul>
     * <li>Если {@code x} меньше всех табулированных аргументов, возвращается {@code 0}.
     * <li>Если {@code x} больше всех табулированных аргументов, возвращается индекс последнего аргумента.
     * <li>Если {@code x} совпадает с одним из табулированных аргументов, возвращается индекс этого аргумента.
     * <li>Если {@code x} находится между табулированными аргументами, возвращается индекс аргумента, ближайшего меньшего.
     * </ul>
     *
     * @param x значение аргумента для поиска
     * @return индекс аргумента, ближайшего меньшего или равного значению аргумента {@code x}
     */
    abstract protected int floorIndexOfX(double x);

    /**
     * Экстраполирует значение функции слева от табулированных значений.
     *
     * @param x значение аргумента для экстраполяции
     * @return экстраполированное значение функции
     */
    abstract protected double extrapolateLeft(double x);

    /**
     * Экстраполирует значение функции справа от табулированных значений.
     *
     * @param x значение аргумента для экстраполяции
     * @return экстраполированное значение функции
     */
    abstract protected double extrapolateRight(double x);

    /**
     * Интерполирует значение функции для заданного аргумента {@code x}.
     *
     * @param x          значение аргумента для интерполяции
     * @param floorIndex индекс аргумента, ближайшего меньшего или равного значению аргумента {@code x}
     * @return интерполированное значение функции
     */
    abstract protected double interpolate(double x, int floorIndex);

    /**
     * Интерполирует значение функции для заданного аргумента {@code x}.
     *
     * @param x      значение аргумента для интерполяции
     * @param leftX  значение аргумента слева от интерполируемого значения
     * @param leftY  значение функции слева от интерполируемого значения
     * @param rightX значение аргумента справа от интерполируемого значения
     * @param rightY значение функции справа от интерполируемого значения
     * @return интерполированное значение функции
     */
    protected double interpolate(double x, double leftX, double leftY, double rightX, double rightY) {
        return leftY + (rightY - leftY) / (rightX - leftX) * (x - leftX);
    }

    /**
     * Применяет табулированную функцию к заданному аргументу {@code x}.
     * <ul>
     * <li>Если {@code x} меньше всех табулированных аргументов (меньше левой границы), выполняется экстраполяция слева.
     * <li>Если {@code x} больше всех табулированных аргументов (больше правой границы), выполняется экстраполяция справа.
     * <li>Если {@code x} совпадает с одним из табулированных аргументов, возвращается соответствующее значение функции.
     * <li>Если {@code x} находится между табулированными аргументами, выполняется интерполяция.
     * </ul>
     *
     * @param x аргумент функции
     * @return значение функции в точке {@code x}
     */
    public double apply(double x) {
        if (x < leftBound()) {
            return extrapolateLeft(x);
        }
        if (x > rightBound()) {
            return extrapolateRight(x);
        }
        if (indexOfX(x) != -1) {
            return getY(indexOfX(x));
        }
        return interpolate(x, floorIndexOfX(x));
    }

}
